class Solution {
public:
  
    int ans=0;
    void backtr(vector<vector<int>>& grid, int x, int y, int cnt, int tk){
        if(x>=grid.size()||x<0||y<0||y>=grid[0].size()||grid[x][y]==-1){
            return;
        }
     

           if(grid[x][y]==2){
             if(tk==cnt+1)
             { ans++;}
               return;
          }
        grid[x][y]=-1;
       
          backtr(grid, x-1,  y, cnt, tk+1);
        
           backtr(grid, x+1,  y, cnt, tk+1);
              
           backtr(grid, x,  y-1, cnt, tk+1);
         
           backtr(grid, x,  y+1, cnt, tk+1);
         grid[x][y]=0;
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
         int n=grid.size();
        if(n==0) return 0;
    int cnt=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==0){
                    cnt++;
                }
            }
        }
       
        int x;
        int y;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    x=i;
                    y=j;
                    break;
                }
            }
        }
      
        int tk=0;
        backtr(grid, x, y, cnt, tk);
        return ans;
    }
};
